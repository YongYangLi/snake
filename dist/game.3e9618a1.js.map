{"version":3,"sources":["src/snake.ts","src/map.ts","src/food.ts","src/game.ts"],"names":[],"mappings":"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","file":"game.3e9618a1.js","sourceRoot":"..","sourcesContent":["export enum DirectionTypes {\r\n\tUP,\r\n\tDOWN,\r\n\tLEFT,\r\n\tRIGHT,\r\n}\r\nexport default class Snake {\r\n\tbody: { x: number; y: number }[];\r\n\tdirection: DirectionTypes;\r\n\tconstructor(heigth: number, width: number, direction: DirectionTypes) {\r\n\t\tthis.body = [];\r\n\t\tthis.body.push({ x: Math.floor(heigth / 2), y: Math.floor(width / 2) });\r\n\t\tthis.body.push({ x: Math.floor(heigth / 2) + 1, y: Math.floor(width / 2) });\r\n\t\tthis.body.push({ x: Math.floor(heigth / 2) + 2, y: Math.floor(width / 2) });\r\n\t\tthis.direction = direction;\r\n\t}\r\n\tturnUpward() {\r\n\t\tif ([DirectionTypes.UP, DirectionTypes.DOWN].includes(this.direction))\r\n\t\t\treturn;\r\n\t\tthis.direction = DirectionTypes.UP;\r\n\t}\r\n\r\n\tturnDownward() {\r\n\t\tif ([DirectionTypes.UP, DirectionTypes.DOWN].includes(this.direction))\r\n\t\t\treturn;\r\n\t\tthis.direction = DirectionTypes.DOWN;\r\n\t}\r\n\r\n\tturnLeft() {\r\n\t\tif ([DirectionTypes.LEFT, DirectionTypes.RIGHT].includes(this.direction))\r\n\t\t\treturn;\r\n\t\tthis.direction = DirectionTypes.LEFT;\r\n\t}\r\n\r\n\tturnRight() {\r\n\t\tif ([DirectionTypes.LEFT, DirectionTypes.RIGHT].includes(this.direction))\r\n\t\t\treturn;\r\n\t\tthis.direction = DirectionTypes.RIGHT;\r\n\t}\r\n\r\n\tmove(eatFood: boolean) {\r\n\t\tif(!eatFood){\r\n\t\t\tthis.body.pop();\r\n\t\t}\t\r\n\t\tlet { x, y } = this.body[0];\r\n\r\n\t\tswitch (this.direction) {\r\n\t\t\tcase DirectionTypes.UP:\r\n\t\t\t\tx -= 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DirectionTypes.DOWN:\r\n\t\t\t\tx += 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DirectionTypes.LEFT:\r\n\t\t\t\ty -= 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DirectionTypes.RIGHT:\r\n\t\t\t\ty += 1;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.body.unshift({ x: x, y: y });\r\n\t}\r\n}\r\n","import Snake from \"./snake\";\r\nimport Food from \"./food\";\r\nlet alltd: Array<any>[] = [];\r\nexport default class Map {\r\n\theigth: number;\r\n\twidth: number;\r\n\tconstructor(heigth: number, width: number) {\r\n\t\tthis.heigth = heigth;\r\n\t\tthis.width = width;\r\n\t}\r\n\r\n\tcreateMap(divName: string) {\r\n\t\tconst elt = document.getElementById(divName);\r\n\t\tfor (let i = 0; i < this.heigth; i++) {\r\n\t\t\tlet thistr = elt?.appendChild(document.createElement(\"tr\"));\r\n\t\t\tlet thistds = [];\r\n\t\t\tfor (let j = 0; j < this.width; j++) {\r\n\t\t\t\tthistds[j] = thistr?.appendChild(document.createElement(\"td\"));\r\n\t\t\t}\r\n\t\t\talltd[i] = thistds;\r\n\t\t}\r\n\t}\r\n\r\n\tdisplaySnake(snake: Snake) {\r\n\t\tsnake.body.forEach((value, index) => {\r\n\t\t\tconst element = alltd[value.x][value.y];\r\n\t\t\tif (element) {\r\n\t\t\t\tindex === 0\r\n\t\t\t\t\t? (element.style.background = \"red\")\r\n\t\t\t\t\t: (element.style.background = \"black\");\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tdisplayFood(food: Food) {\r\n\t\tconst element = alltd[food.x][food.y];\r\n\t\tif (element) {\r\n\t\t\telement.style.background = \"yellow\";\r\n\t\t}\r\n\t}\r\n\r\n\tremoveStyle(snake: Snake, food: Food) {\r\n\t\talltd.forEach((value,i) => {\r\n\t\t\tvalue.forEach((v,j) => {\r\n\t\t\t\tif(food.x === i && food.y ===j){\r\n\t\t\t\t}else{\r\n\t\t\t\t\tv.style.background = \"\";\r\n\t\t\t\t}\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tremoveFoodStyle(food: Food) {\r\n\t\tconst element = alltd[food.x][food.y];\r\n\t\tif (element) {\r\n\t\t\telement.style.background = \"\";\r\n\t\t}\r\n\t}\r\n}\r\n","export default class Food{\r\n  x: number;\r\n  y: number;\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}","import Snake, { DirectionTypes } from \"./snake\";\r\nimport Map from \"./map\";\r\nimport Food from \"./food\";\r\nlet eatFood: boolean = false;\r\nexport default class Game {\r\n\tsnake: Snake;\r\n\tmap: Map;\r\n\tfood: Food = { x: 0, y: 0 };\r\n\tprivate _timer: any;\r\n\tprivate _start = false;\r\n\tconstructor() {\r\n\t\tthis.map = new Map(15, 15);\r\n\t\tthis.snake = new Snake(this.map.heigth, this.map.width, DirectionTypes.UP);\r\n\t\tthis.map.createMap(\"map\");\r\n\t\tthis.createFood();\r\n\t\tthis.map.displaySnake(this.snake);\r\n\t\twindow.addEventListener(\"keydown\", this._handleKeydown, false);\r\n\t}\r\n\r\n\tprivate move = () => {\r\n\t\tthis.map.removeStyle(this.snake, this.food);\r\n\t\tthis._eatFood();\r\n\t\tthis.snake.move(eatFood);\r\n\t\teatFood = false;\r\n\t\tthis._gameover();\r\n\t\tthis.map.displaySnake(this.snake);\r\n\t};\r\n\r\n\tprivate _handleKeydown = (event: KeyboardEvent) => {\r\n\t\tif (!this._start) {\r\n\t\t\tthis._timer = setInterval(this.move, 200);\r\n\t\t\tthis._start = true;\r\n\t\t}\r\n\t\tswitch (event.keyCode) {\r\n\t\t\tcase 37: //左\r\n\t\t\t\tthis.snake.turnLeft();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 38: //上\r\n\t\t\t\tthis.snake.turnUpward();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 39: //右\r\n\t\t\t\tthis.snake.turnRight();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 40: //下\r\n\t\t\t\tthis.snake.turnDownward();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tprivate _gameover() {\r\n\t\tlet head = this.snake.body[0];\r\n\t\tlet noHeadBody = this.snake.body.slice(1);\r\n\t\tif (\r\n\t\t\thead.x < 0 ||\r\n\t\t\thead.y < 0 ||\r\n\t\t\thead.x > this.map.heigth - 1 ||\r\n\t\t\thead.y > this.map.width - 1 ||\r\n\t\t\tJSON.stringify(noHeadBody).includes(JSON.stringify(head))\r\n\t\t) {\r\n\t\t\tclearInterval(this._timer);\r\n\t\t\talert(\"game over\");\r\n\t\t\tthis.snake = new Snake(\r\n\t\t\t\tthis.map.heigth,\r\n\t\t\t\tthis.map.width,\r\n\t\t\t\tDirectionTypes.UP\r\n\t\t\t);\r\n\t\t\tthis.map.removeFoodStyle(this.food);\r\n\t\t\tthis.createFood();\r\n\t\t\tthis._start = false;\r\n\t\t}\r\n\t}\r\n\r\n\tcreateFood(): Food {\r\n\t\tlet x: number, y: number;\r\n\t\twhile (true) {\r\n\t\t\tx = Math.floor(Math.random() * (this.map.heigth - 1));\r\n\t\t\ty = Math.floor(Math.random() * (this.map.width - 1));\r\n\t\t\tif (!this.snake.body.includes({ x: x, y: y })) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst food = new Food(x, y);\r\n\t\tthis.food = food;\r\n\t\tthis.map.displayFood(food);\r\n\t\treturn food;\r\n\t}\r\n\r\n\tprivate _eatFood() {\r\n\t\tlet head = this.snake.body[0];\r\n\t\tif (head.x === this.food.x && head.y === this.food.y) {\r\n\t\t\tthis.map.removeFoodStyle(this.food);\r\n\t\t\teatFood = true;\r\n\t\t\tthis.createFood();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nnew Game();\r\n"]}